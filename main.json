{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "350043398291913024"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "The location for the resources deployed in this solution."
      }
    },
    "deploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "The suffix to be added to the deployment name."
      }
    },
    "deploymentNamePrefix": {
      "type": "string",
      "defaultValue": "cs-ioa",
      "metadata": {
        "description": "The suffix to be added to the deployment name."
      }
    },
    "iomResourceGroupName": {
      "type": "string",
      "defaultValue": "cs-iom-group",
      "metadata": {
        "description": "The name of the resource group."
      }
    },
    "ioaResourceGroupName": {
      "type": "string",
      "defaultValue": "cs-ioa-group",
      "metadata": {
        "description": "The name of the resource group."
      }
    },
    "falconClientId": {
      "type": "string",
      "metadata": {
        "description": "The client ID for the Falcon API."
      }
    },
    "falconClientSecret": {
      "type": "securestring",
      "metadata": {
        "description": "The client secret for the Falcon API."
      }
    },
    "falconCID": {
      "type": "string",
      "metadata": {
        "description": "The CID for the Falcon API."
      }
    },
    "appRegistrationAppId": {
      "type": "string",
      "metadata": {
        "description": "The app registration ID for the Azure AD application."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {
        "cstag-vendor": "crowdstrike",
        "cstag-product": "fcs",
        "cstag-purpose": "cspm"
      },
      "metadata": {
        "description": "Tags to be applied to all resources."
      }
    },
    "uamiName": {
      "type": "string",
      "metadata": {
        "description": "The name of the user-assigned managed identity."
      }
    },
    "uamiResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource Id of the user-assigned managed identity."
      }
    },
    "deployIOA": {
      "type": "bool",
      "defaultValue": false
    },
    "deployIOM": {
      "type": "bool",
      "defaultValue": true
    },
    "randomSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(parameters('ioaResourceGroupName'))]"
    },
    "exemptPolicyAssignmentIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The array of policy assignment IDs to exempt to prevent issues with the build process."
      }
    },
    "falconCloudRegion": {
      "type": "string",
      "defaultValue": "US-1",
      "allowedValues": [
        "US-1",
        "US-2",
        "EU-1"
      ],
      "metadata": {
        "description": "The Falcon cloud region."
      }
    },
    "deployActivityLogDiagnosticSettings": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Activity Log Diagnostic Settings"
      }
    },
    "deployEntraLogDiagnosticSettings": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Deploy Entra Log Diagnostic Settings"
      }
    }
  },
  "variables": {
    "csLogSettings": {
      "storageAccountName": "[substring(format('cshorizonlogs{0}', parameters('randomSuffix')), 0, 24)]",
      "storageAccountIdentityName": "[substring(format('cshorizonlogs{0}', parameters('randomSuffix')), 0, 24)]",
      "storagePrivateEndpointName": "log-storage-private-endpoint",
      "storagePrivateEndpointConnectionName": "cs-log-storage-private-endpoint"
    },
    "activityLogSettings": {
      "hostingPlanName": "cs-activity-service-plan",
      "functionAppName": "[format('cs-activity-func-{0}', variables('subscriptionId'))]",
      "functionAppIdentityName": "[format('cs-activity-func-{0}', variables('subscriptionId'))]",
      "functionAppDiagnosticSettingName": "cs-activity-func-to-storage",
      "ioaPackageURL": "https://cs-prod-cloudconnect-templates.s3-us-west-1.amazonaws.com/azure/4.x/ioa.zip",
      "storageAccountName": "[substring(format('cshorizonact{0}', parameters('randomSuffix')), 0, 24)]",
      "storageAccountIdentityName": "[substring(format('cshorizonact{0}', parameters('randomSuffix')), 0, 24)]",
      "storagePrivateEndpointName": "activity-storage-private-endpoint",
      "storagePrivateEndpointConnectionName": "cs-activity-storage-private-endpoint",
      "eventHubName": "cs-eventhub-monitor-activity-logs",
      "diagnosticSetttingsName": "cs-monitor-activity-to-eventhub"
    },
    "entraLogSettings": {
      "hostingPlanName": "cs-aad-service-plan",
      "functionAppName": "[format('cs-aad-func-{0}', variables('subscriptionId'))]",
      "functionAppIdentityName": "[format('cs-aad-func-{0}', variables('subscriptionId'))]",
      "functionAppDiagnosticSettingName": "cs-aad-func-to-storage",
      "ioaPackageURL": "https://cs-prod-cloudconnect-templates.s3-us-west-1.amazonaws.com/azure/4.x/ioa.zip",
      "storageAccountName": "[substring(format('cshorizonaad{0}', parameters('randomSuffix')), 0, 24)]",
      "storageAccountIdentityName": "[substring(format('cshorizonaad{0}', parameters('randomSuffix')), 0, 24)]",
      "storagePrivateEndpointName": "aad-storage-private-endpoint",
      "storagePrivateEndpointConnectionName": "cs-aad-storage-private-endpoint",
      "eventHubName": "cs-eventhub-monitor-aad-logs",
      "diagnosticSetttingsName": "cs-aad-to-eventhub"
    },
    "subscriptionId": "[subscription().subscriptionId]",
    "ioaKeyVaultName": "[format('kv-ioa-{0}', uniqueString(parameters('ioaResourceGroupName')))]",
    "iomKeyVaultName": "[format('kv-iom-{0}', uniqueString(parameters('iomResourceGroupName')))]",
    "eventHubNamespaceName": "[format('cs-horizon-ns-{0}', variables('subscriptionId'))]",
    "virtualNetworkName": "cs-vnet"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2024-03-01",
      "name": "[parameters('iomResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2024-03-01",
      "name": "[parameters('ioaResourceGroupName')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[and(parameters('deployActivityLogDiagnosticSettings'), parameters('deployIOA'))]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "name": "[variables('activityLogSettings').diagnosticSetttingsName]",
      "properties": {
        "eventHubAuthorizationRuleId": "[if(and(parameters('deployIOA'), parameters('deployActivityLogDiagnosticSettings')), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubAuthorizationRuleId.value, 'none')]",
        "eventHubName": "[if(and(parameters('deployIOA'), parameters('deployActivityLogDiagnosticSettings')), variables('activityLogSettings').eventHubName, 'none')]",
        "logs": [
          {
            "category": "Administrative",
            "enabled": true
          },
          {
            "category": "Security",
            "enabled": true
          },
          {
            "category": "ServiceHealth",
            "enabled": true
          },
          {
            "category": "Alert",
            "enabled": true
          },
          {
            "category": "Recommendation",
            "enabled": true
          },
          {
            "category": "Policy",
            "enabled": true
          },
          {
            "category": "Autoscale",
            "enabled": true
          },
          {
            "category": "ResourceHealth",
            "enabled": true
          }
        ]
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "copy": {
        "name": "policyExemptions",
        "count": "[length(range(0, length(parameters('exemptPolicyAssignmentIds'))))]"
      },
      "condition": "[not(empty(parameters('exemptPolicyAssignmentIds')[0]))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('PolicyExemption_{0}', range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()])]",
      "subscriptionId": "[variables('subscriptionId')]",
      "resourceGroup": "[parameters('iomResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "policyAssignmentId": {
            "value": "[parameters('exemptPolicyAssignmentIds')[range(0, length(parameters('exemptPolicyAssignmentIds')))[copyIndex()]]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1195587575101626735"
            }
          },
          "parameters": {
            "policyAssignmentId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/policyExemptions",
              "apiVersion": "2022-07-01-preview",
              "name": "exempt-cspm-resource-group",
              "properties": {
                "assignmentScopeValidation": "Default",
                "description": "Exempts the resource group to prevent issues with deploying FCS CSPM.",
                "displayName": "IOM and IOA Resource Group Exemption",
                "exemptionCategory": "Mitigated",
                "expiresOn": null,
                "metadata": null,
                "policyAssignmentId": "[parameters('policyAssignmentId')]",
                "policyDefinitionReferenceIds": [],
                "resourceSelectors": []
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('iomResourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployIOM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('iomResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "falconClientId": "[if(parameters('deployIOM'), createObject('value', parameters('falconClientId')), createObject('value', 'none'))]",
          "falconClientSecret": "[if(parameters('deployIOM'), createObject('value', parameters('falconClientSecret')), createObject('value', 'none'))]",
          "appRegistration": "[if(parameters('deployIOM'), createObject('value', parameters('appRegistrationAppId')), createObject('value', 'none'))]",
          "subscriptionId": "[if(parameters('deployIOM'), createObject('value', variables('subscriptionId')), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1972172272929861199"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "falconClientId": {
              "type": "string"
            },
            "falconClientSecret": {
              "type": "securestring"
            },
            "appRegistration": {
              "type": "string"
            },
            "subscriptionId": {
              "type": "string"
            }
          },
          "variables": {
            "tenantId": "[subscription().tenantId]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "cs-account-deployment",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "10.0",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT1H",
                "arguments": "[format('-clientId {0} -clientSecret {1} -appRegistrationId {2} -tenantId {3} -subscriptionId {4}', parameters('falconClientId'), parameters('falconClientSecret'), parameters('appRegistration'), variables('tenantId'), parameters('subscriptionId'))]",
                "scriptContent": "      param(\r\n        [string] $clientId,\r\n        [string] $clientSecret,\r\n        [string] $appRegistrationId,\r\n        [string] $tenantId,\r\n        [string] $subscriptionId\r\n    )\r\n    $ErrorActionPreference = 'Stop'\r\n    # Authenticate to Falcon Cloud Security\r\n    try \r\n    {\r\n      Install-Module -Name PSFalcon -Force\r\n    } \r\n    catch\r\n    {\r\n      Write-Error \"Failed to install PSFalcon module: $_\"\r\n      throw\r\n    }\r\n\r\n    try\r\n    {\r\n      # Build token request\r\n      $Token = @{\r\n        ClientId     = $clientId\r\n        ClientSecret = $clientSecret\r\n      }\r\n      # Request token\r\n      Request-FalconToken @Token\r\n    } \r\n    catch \r\n     {\r\n      Write-Error \"Failed to request Falcon token: $_\"\r\n      throw\r\n    }\r\n\r\n    try \r\n    {\r\n      # Create Azure Account in Falcon Horizon\r\n      $test =  $null\r\n      if ($test -ne $null) \r\n      {\r\n        Write-Output \"Azure account already exists in Falcon Horizon\"\r\n      }\r\n      else \r\n      {\r\n        New-FalconHorizonAzureAccount -subscriptionId $subscriptionId -TenantId $tenantId -ClientId $appRegistrationId\r\n      }\r\n   }\r\n    catch \r\n    {\r\n      Write-Error \"Failed to create Azure account in Falcon Horizon: $_\"\r\n      throw\r\n    }\r\n\r\n    try \r\n    {\r\n      # Get certificate\r\n      $cert = (Get-FalconHorizonAzureCertificate -TenantId $tenantId).public_certificate\r\n\r\n      # Output certificate\r\n      $DeploymentScriptOutputs['text'] = $cert\r\n      Write-Output $cert\r\n    } \r\n    catch \r\n    {\r\n      Write-Error \"Failed to get or output certificate: $_\"\r\n      throw\r\n    }\r\n    "
              }
            }
          ],
          "outputs": {
            "text": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', 'cs-account-deployment'), '2023-08-01').outputs.text]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('iomResourceGroupName'))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cs-iom-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('iomResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": "[if(parameters('deployIOM'), createObject('value', variables('iomKeyVaultName')), createObject('value', 'none'))]",
          "falconClientId": "[if(parameters('deployIOM'), createObject('value', parameters('falconClientId')), createObject('value', 'none'))]",
          "falconClientSecret": "[if(parameters('deployIOM'), createObject('value', parameters('falconClientSecret')), createObject('value', 'none'))]",
          "cspmCertificate": "[if(parameters('deployIOM'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.text.value), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "503580056297423385"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "allowedValues": [
                "standard",
                "premium"
              ]
            },
            "cspmCertificate": {
              "type": "securestring"
            },
            "falconClientId": {
              "type": "string"
            },
            "falconClientSecret": {
              "type": "securestring"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "properties": {
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "family": "A",
                  "name": "[parameters('skuName')]"
                },
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": false,
                "enablePurgeProtection": true,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Allow",
                  "ipRules": [],
                  "virtualNetworkRules": []
                },
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'falcon-cspm-certificate')]",
              "properties": {
                "value": "[parameters('cspmCertificate')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'falcon-client-id')]",
              "properties": {
                "value": "[parameters('falconClientId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'falcon-client-secret')]",
              "properties": {
                "value": "[parameters('falconClientSecret')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('iomResourceGroupName'))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cs-iom-cert-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('iomResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": "[if(parameters('deployIOM'), createObject('value', parameters('location')), createObject('value', 'none'))]",
          "appRegistrationId": "[if(parameters('deployIOM'), createObject('value', parameters('appRegistrationAppId')), createObject('value', 'none'))]",
          "cspmCertificate": "[if(parameters('deployIOM'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.text.value), createObject('value', 'none'))]",
          "userAssignedIdentityName": "[if(parameters('deployIOM'), createObject('value', parameters('uamiName')), createObject('value', 'none'))]",
          "userAssignedIdentityResourceGroupName": "[if(parameters('deployIOM'), createObject('value', split(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, split(parameters('uamiResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('uamiName')), '/')[4]), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "16955837604268346146"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "appRegistrationId": {
              "type": "string"
            },
            "cspmCertificate": {
              "type": "securestring"
            },
            "userAssignedIdentityName": {
              "type": "string"
            },
            "userAssignedIdentityResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "cs-certificate-deployment",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "azPowerShellVersion": "10.0",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT1H",
                "arguments": "[format('-appRegistrationId {0} -tenantId {1} -subscriptionId {2} -certificate {3} -userAssignedIdentityClientId {4}', parameters('appRegistrationId'), tenant().tenantId, subscription().subscriptionId, parameters('cspmCertificate'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2018-11-30').clientId)]",
                "scriptContent": "      param(\r\n        [string] $appRegistrationId,\r\n        [string] $tenantId,\r\n        [string] $subscriptionId,\r\n        [string] $certificate,\r\n        [string] $userAssignedIdentityClientId\r\n        )\r\n\r\n      try \r\n      {\r\n        Install-Module Microsoft.Graph -Force\r\n      } \r\n      catch \r\n      {\r\n        Write-Error \"Failed to install Microsoft.Graph module: $_\"\r\n        exit 1\r\n      }\r\n\r\n      try \r\n      {\r\n        $base64Cert = [System.Convert]::FromBase64String($certificate)\r\n      } \r\n      catch \r\n      {\r\n        Write-Error \"Failed to convert certificate from Base64: $_\"\r\n        exit 1\r\n      }\r\n\r\n      try \r\n      {\r\n        Connect-MgGraph -Identity -ClientId $userAssignedIdentityClientId\r\n      } \r\n      catch \r\n      {\r\n        Write-Error \"Failed to connect to Microsoft Graph: $_\"\r\n        exit 1\r\n      }\r\n\r\n      $KeyCredentials = @{\r\n        DisplayName = 'CrowdStrike FCS Certificate'\r\n        StartDateTime = (Get-Date)\r\n        Type  = 'AsymmetricX509Cert'\r\n        Usage = 'Verify'\r\n        Key   = $base64Cert\r\n      }\r\n\r\n      try \r\n      {\r\n        Update-MgApplicationByAppId -AppId $appRegistrationId -KeyCredentials $KeyCredentials\r\n      } \r\n      catch \r\n      {\r\n        Write-Error \"Failed to update application with new key credentials: $_\"\r\n        exit 1\r\n      }\r\n    "
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('iomResourceGroupName'))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOM')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cs-iom-role-{0}', parameters('deploymentNameSuffix'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": "[if(parameters('deployIOM'), createObject('value', parameters('appRegistrationAppId')), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "9894063316347119353"
            }
          },
          "parameters": {
            "principalId": {
              "type": "string"
            }
          },
          "variables": {
            "roleDefinitionIds": [
              "39bc4728-0917-49c7-9d2c-d95423bc2eb4",
              "21090545-7ca7-4776-b22c-e363652d74d2",
              "acdd72a7-3385-48ef-bd42-f606fba81ae7",
              "de139f84-1756-47ae-9be6-808fbbe84772",
              "7f6c6a51-bcf8-42ba-9220-52d62157d7db"
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(variables('roleDefinitionIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(parameters('principalId'), variables('roleDefinitionIds')[copyIndex()], subscription().subscriptionId)]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roleDefinitionIds')[copyIndex()])]",
                "principalId": "[parameters('principalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-cert-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', variables('ioaKeyVaultName')), createObject('value', 'none'))]",
          "falconClientId": "[if(parameters('deployIOA'), createObject('value', parameters('falconClientId')), createObject('value', 'none'))]",
          "falconClientSecret": "[if(parameters('deployIOA'), createObject('value', parameters('falconClientSecret')), createObject('value', 'none'))]",
          "virtualNetworkName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "7204261003884644450"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "falconClientId": {
              "type": "string"
            },
            "falconClientSecret": {
              "type": "securestring"
            },
            "virtualNetworkName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-07-01",
              "name": "[parameters('keyVaultName')]",
              "location": "[parameters('location')]",
              "tags": {},
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enablePurgeProtection": true,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": [
                    {
                      "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2019-11-01').subnets[0].id]",
                      "ignoreMissingVnetServiceEndpoint": true
                    },
                    {
                      "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2019-11-01').subnets[1].id]",
                      "ignoreMissingVnetServiceEndpoint": true
                    }
                  ]
                },
                "publicNetworkAccess": "Enabled",
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "softDeleteRetentionInDays": 7,
                "tenantId": "[subscription().tenantId]"
              }
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'cs-log-storage-key')]",
              "tags": {},
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exportable": false
                },
                "keyOps": [
                  "decrypt",
                  "encrypt",
                  "sign",
                  "unwrapKey",
                  "verify",
                  "wrapKey"
                ],
                "keySize": 4096,
                "kty": "RSA"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'cs-activity-storage-key')]",
              "tags": {},
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exportable": false
                },
                "keyOps": [
                  "decrypt",
                  "encrypt",
                  "sign",
                  "unwrapKey",
                  "verify",
                  "wrapKey"
                ],
                "keySize": 4096,
                "kty": "RSA"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'cs-aad-storage-key')]",
              "tags": {},
              "properties": {
                "attributes": {
                  "enabled": true,
                  "exportable": false
                },
                "keyOps": [
                  "decrypt",
                  "encrypt",
                  "sign",
                  "unwrapKey",
                  "verify",
                  "wrapKey"
                ],
                "keySize": 4096,
                "kty": "RSA"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'falcon-client-id')]",
              "properties": {
                "value": "[parameters('falconClientId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'falcon-client-secret')]",
              "properties": {
                "value": "[parameters('falconClientSecret')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'cs-client-id')]",
              "tags": {},
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "value": "[parameters('falconClientId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), 'cs-client-secret')]",
              "tags": {},
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "value": "[parameters('falconClientSecret')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
              ]
            }
          ],
          "outputs": {
            "keyVaultResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
            },
            "keyVaultName": {
              "type": "string",
              "value": "[parameters('keyVaultName')]"
            },
            "csLogStorageKeyName": {
              "type": "string",
              "value": "cs-log-storage-key"
            },
            "activityLogStorageKeyName": {
              "type": "string",
              "value": "cs-activity-storage-key"
            },
            "entraLogStorageKeyName": {
              "type": "string",
              "value": "cs-aad-storage-key"
            },
            "keyVaultUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            "csClientIdUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'cs-client-id'), '2023-07-01').secretUri]"
            },
            "csClientSecretUri": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'cs-client-secret'), '2023-07-01').secretUri]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "virtualNetworkName": "[if(parameters('deployIOA'), createObject('value', variables('virtualNetworkName')), createObject('value', 'none'))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1263560035065631618"
            }
          },
          "parameters": {
            "virtualNetworkName": {
              "type": "string"
            },
            "subnetNames": {
              "type": "array",
              "defaultValue": [
                "cs-subnet-1",
                "cs-subnet-2",
                "cs-subnet-3"
              ]
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2019-11-01",
              "name": "[parameters('virtualNetworkName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.0.0.0/16"
                  ]
                },
                "subnets": [
                  {
                    "name": "[parameters('subnetNames')[0]]",
                    "properties": {
                      "addressPrefix": "10.0.0.0/24",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ],
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.EventHub"
                        }
                      ]
                    }
                  },
                  {
                    "name": "[parameters('subnetNames')[1]]",
                    "properties": {
                      "addressPrefix": "10.0.1.0/24",
                      "delegations": [
                        {
                          "name": "delegation",
                          "properties": {
                            "serviceName": "Microsoft.Web/serverFarms"
                          }
                        }
                      ],
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.EventHub"
                        }
                      ]
                    }
                  },
                  {
                    "name": "[parameters('subnetNames')[2]]",
                    "properties": {
                      "addressPrefix": "10.0.3.0/24",
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.EventHub"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ],
          "outputs": {
            "virtualNetworkName": {
              "type": "string",
              "value": "[parameters('virtualNetworkName')]"
            },
            "virtualNetworkId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            },
            "csSubnet1Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetNames')[0])]"
            },
            "csSubnet2Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetNames')[1])]"
            },
            "csSubnet3Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnetNames')[2])]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "eventHubNamespaceName": "[if(parameters('deployIOA'), createObject('value', variables('eventHubNamespaceName')), createObject('value', 'none'))]",
          "activityLogEventHubName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').eventHubName), createObject('value', 'none'))]",
          "entraLogEventHubName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').eventHubName), createObject('value', 'none'))]",
          "virtualNetworkName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "5540072142807478932"
            }
          },
          "parameters": {
            "eventHubNamespaceName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "activityLogEventHubName": {
              "type": "string"
            },
            "entraLogEventHubName": {
              "type": "string"
            },
            "authorizationRuleName": {
              "type": "string",
              "defaultValue": "cs-eventhub-monitor-auth-rule"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces",
              "apiVersion": "2024-01-01",
              "name": "[parameters('eventHubNamespaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "capacity": 2,
                "name": "Standard",
                "tier": "Standard"
              },
              "identity": {
                "type": "None"
              },
              "properties": {
                "disableLocalAuth": true,
                "isAutoInflateEnabled": true,
                "maximumThroughputUnits": 10,
                "minimumTlsVersion": "1.2",
                "publicNetworkAccess": "Enabled"
              }
            },
            {
              "type": "Microsoft.EventHub/namespaces/networkRuleSets",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), 'default')]",
              "properties": {
                "defaultAction": "Deny",
                "ipRules": [],
                "publicNetworkAccess": "Enabled",
                "trustedServiceAccessEnabled": true,
                "virtualNetworkRules": [
                  {
                    "ignoreMissingVnetServiceEndpoint": true,
                    "subnet": {
                      "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2019-11-01').subnets[0].id]"
                    }
                  },
                  {
                    "ignoreMissingVnetServiceEndpoint": true,
                    "subnet": {
                      "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName')), '2019-11-01').subnets[1].id]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('activityLogEventHubName'))]",
              "properties": {
                "partitionCount": 8,
                "retentionDescription": {
                  "cleanupPolicy": "Delete",
                  "retentionTimeInHours": 24
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('entraLogEventHubName'))]",
              "properties": {
                "partitionCount": 8,
                "retentionDescription": {
                  "cleanupPolicy": "Delete",
                  "retentionTimeInHours": 24
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            },
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2024-01-01",
              "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('authorizationRuleName'))]",
              "properties": {
                "rights": [
                  "Send"
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
              ]
            }
          ],
          "outputs": {
            "eventHubNamespaceName": {
              "type": "string",
              "value": "[parameters('eventHubNamespaceName')]"
            },
            "eventHubNamespaceServiceBusEndpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName')), '2024-01-01').serviceBusEndpoint]"
            },
            "eventHubAuthorizationRuleId": {
              "type": "string",
              "value": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', parameters('eventHubNamespaceName'), parameters('authorizationRuleName'))]"
            },
            "activityLogEventHubName": {
              "type": "string",
              "value": "[parameters('activityLogEventHubName')]"
            },
            "entraLogEventHubName": {
              "type": "string",
              "value": "[parameters('entraLogEventHubName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityName": "[if(parameters('deployIOA'), createObject('value', variables('csLogSettings').storageAccountIdentityName), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('csLogSettings').storageAccountName), createObject('value', 'none'))]",
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet1Id.value), createObject('value', 'none'))]",
          "storagePrivateEndpointName": "[if(parameters('deployIOA'), createObject('value', variables('csLogSettings').storagePrivateEndpointName), createObject('value', 'none'))]",
          "storagePrivateEndpointConnectionName": "[if(parameters('deployIOA'), createObject('value', variables('csLogSettings').storagePrivateEndpointConnectionName), createObject('value', 'none'))]",
          "storagePrivateEndpointSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet3Id.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "5691774044401915375"
            }
          },
          "parameters": {
            "userAssignedIdentityName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultCryptoOfficerRoleId": {
              "type": "string",
              "defaultValue": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603"
            },
            "storageAccountSubnetId": {
              "type": "string"
            },
            "storagePrivateEndpointName": {
              "type": "string"
            },
            "storagePrivateEndpointConnectionName": {
              "type": "string"
            },
            "storagePrivateEndpointSubnetId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('userAssignedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultCryptoOfficerRoleId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "allowBlobPublicAccess": false,
                "encryption": {
                  "requireInfrastructureEncryption": true
                },
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices, Logging, Metrics",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": [
                    {
                      "action": "Allow",
                      "id": "[parameters('storageAccountSubnetId')]"
                    }
                  ]
                },
                "publicNetworkAccess": "Enabled",
                "supportsHttpsTrafficOnly": true
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 1
                },
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[parameters('storagePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('storagePrivateEndpointConnectionName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('storagePrivateEndpointSubnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "userAssignedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-csLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentity": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityId.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value), createObject('value', 'none'))]",
          "keyName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csLogStorageKeyName.value), createObject('value', 'none'))]",
          "keyVaultUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12588247944315089708"
            }
          },
          "parameters": {
            "userAssignedIdentity": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentity')]"
                  },
                  "keySource": "Microsoft.Keyvault",
                  "keyvaultproperties": {
                    "keyname": "[parameters('keyName')]",
                    "keyvaulturi": "[parameters('keyVaultUri')]"
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-keyVaultDiagnosticSetting-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value), createObject('value', 'none'))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1120004845712076468"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "diagnosticSettingName": {
              "type": "string",
              "defaultValue": "cs-kv-to-storage"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "logs": [
                  {
                    "categoryGroup": "audit",
                    "enabled": true
                  },
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  }
                ],
                "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-csLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storageAccountIdentityName), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storageAccountName), createObject('value', 'none'))]",
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet1Id.value), createObject('value', 'none'))]",
          "storagePrivateEndpointName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storagePrivateEndpointName), createObject('value', 'none'))]",
          "storagePrivateEndpointConnectionName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storagePrivateEndpointConnectionName), createObject('value', 'none'))]",
          "storagePrivateEndpointSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet3Id.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "5691774044401915375"
            }
          },
          "parameters": {
            "userAssignedIdentityName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultCryptoOfficerRoleId": {
              "type": "string",
              "defaultValue": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603"
            },
            "storageAccountSubnetId": {
              "type": "string"
            },
            "storagePrivateEndpointName": {
              "type": "string"
            },
            "storagePrivateEndpointConnectionName": {
              "type": "string"
            },
            "storagePrivateEndpointSubnetId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('userAssignedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultCryptoOfficerRoleId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "allowBlobPublicAccess": false,
                "encryption": {
                  "requireInfrastructureEncryption": true
                },
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices, Logging, Metrics",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": [
                    {
                      "action": "Allow",
                      "id": "[parameters('storageAccountSubnetId')]"
                    }
                  ]
                },
                "publicNetworkAccess": "Enabled",
                "supportsHttpsTrafficOnly": true
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 1
                },
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[parameters('storagePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('storagePrivateEndpointConnectionName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('storagePrivateEndpointSubnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "userAssignedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-activityLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentity": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityId.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value), createObject('value', 'none'))]",
          "keyName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.activityLogStorageKeyName.value), createObject('value', 'none'))]",
          "keyVaultUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12588247944315089708"
            }
          },
          "parameters": {
            "userAssignedIdentity": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentity')]"
                  },
                  "keySource": "Microsoft.Keyvault",
                  "keyvaultproperties": {
                    "keyname": "[parameters('keyName')]",
                    "keyvaulturi": "[parameters('keyVaultUri')]"
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentityName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storageAccountIdentityName), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storageAccountName), createObject('value', 'none'))]",
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet2Id.value), createObject('value', 'none'))]",
          "storagePrivateEndpointName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storagePrivateEndpointName), createObject('value', 'none'))]",
          "storagePrivateEndpointConnectionName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storagePrivateEndpointConnectionName), createObject('value', 'none'))]",
          "storagePrivateEndpointSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet3Id.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "5691774044401915375"
            }
          },
          "parameters": {
            "userAssignedIdentityName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyVaultName": {
              "type": "string"
            },
            "keyVaultCryptoOfficerRoleId": {
              "type": "string",
              "defaultValue": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603"
            },
            "storageAccountSubnetId": {
              "type": "string"
            },
            "storagePrivateEndpointName": {
              "type": "string"
            },
            "storagePrivateEndpointConnectionName": {
              "type": "string"
            },
            "storagePrivateEndpointSubnetId": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('userAssignedIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId'))]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('keyVaultCryptoOfficerRoleId'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
                }
              },
              "properties": {
                "allowBlobPublicAccess": false,
                "encryption": {
                  "requireInfrastructureEncryption": true
                },
                "minimumTlsVersion": "TLS1_2",
                "networkAcls": {
                  "bypass": "AzureServices, Logging, Metrics",
                  "defaultAction": "Deny",
                  "ipRules": [],
                  "virtualNetworkRules": [
                    {
                      "action": "Allow",
                      "id": "[parameters('storageAccountSubnetId')]"
                    }
                  ]
                },
                "publicNetworkAccess": "Enabled",
                "supportsHttpsTrafficOnly": true
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), 'Microsoft.Authorization/roleAssignments', guid('keyVault', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), parameters('keyVaultCryptoOfficerRoleId')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "deleteRetentionPolicy": {
                  "enabled": true,
                  "days": 1
                },
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/queueServices",
              "apiVersion": "2021-09-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/tableServices",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
              "properties": {
                "logging": {
                  "read": true,
                  "write": true,
                  "delete": true,
                  "retentionPolicy": {
                    "enabled": true,
                    "days": 7
                  },
                  "version": "1.0"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[parameters('storagePrivateEndpointName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": [
                  {
                    "name": "[parameters('storagePrivateEndpointConnectionName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ],
                "subnet": {
                  "id": "[parameters('storagePrivateEndpointSubnetId')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              ]
            }
          ],
          "outputs": {
            "userAssignedIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))]"
            },
            "storageAccountName": {
              "type": "string",
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-entraLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentity": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.userAssignedIdentityId.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.storageAccountName.value), createObject('value', 'none'))]",
          "keyName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.activityLogStorageKeyName.value), createObject('value', 'none'))]",
          "keyVaultUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultUri.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12588247944315089708"
            }
          },
          "parameters": {
            "userAssignedIdentity": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "keyName": {
              "type": "string"
            },
            "keyVaultUri": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('storageAccountName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "encryption": {
                  "identity": {
                    "userAssignedIdentity": "[parameters('userAssignedIdentity')]"
                  },
                  "keySource": "Microsoft.Keyvault",
                  "keyvaultproperties": {
                    "keyname": "[parameters('keyName')]",
                    "keyvaulturi": "[parameters('keyVaultUri')]"
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-activityLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppIdentityName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').functionAppIdentityName), createObject('value', 'none'))]",
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storageAccountName), createObject('value', 'none'))]",
          "eventHubNamespaceName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubNamespaceName.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "3759890741511968330"
            }
          },
          "parameters": {
            "functionAppIdentityName": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal"
            },
            "keyVaultName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "eventHubNamespaceName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "KeyVaultSecretsOfficerRoleId": {
              "type": "string",
              "defaultValue": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
            },
            "StorageBlobDataOwnerRoleId": {
              "type": "string",
              "defaultValue": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
            },
            "AzureEventHubsDataReceiverRoleId": {
              "type": "string",
              "defaultValue": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('functionAppIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('KeyVaultSecretsOfficerRoleId'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('KeyVaultSecretsOfficerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('StorageBlobDataOwnerRoleId'), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('StorageBlobDataOwnerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}', parameters('eventHubNamespaceName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('AzureEventHubsDataReceiverRoleId'), resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('AzureEventHubsDataReceiverRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            }
          ],
          "outputs": {
            "functionIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
            },
            "functionIdentityName": {
              "type": "string",
              "value": "[parameters('functionAppIdentityName')]"
            },
            "functionIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').clientId]"
            },
            "functionIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-activityLogFunction-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostingPlanName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').hostingPlanName), createObject('value', 'none'))]",
          "functionAppName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').functionAppName), createObject('value', 'none'))]",
          "functionAppIdentityName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.functionIdentityName.value), createObject('value', 'none'))]",
          "packageURL": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').ioaPackageURL), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').storageAccountName), createObject('value', 'none'))]",
          "eventHubNamespaceName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubNamespaceName.value), createObject('value', 'none'))]",
          "eventHubName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').eventHubName), createObject('value', 'none'))]",
          "virtualNetworkName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value), createObject('value', 'none'))]",
          "virtualNetworkSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet1Id.value), createObject('value', 'none'))]",
          "diagnosticSettingName": "[if(parameters('deployIOA'), createObject('value', variables('activityLogSettings').functionAppDiagnosticSettingName), createObject('value', 'none'))]",
          "csCID": "[if(parameters('deployIOA'), createObject('value', parameters('falconCID')), createObject('value', 'none'))]",
          "csClientIdUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csClientIdUri.value), createObject('value', 'none'))]",
          "csClientSecretUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csClientSecretUri.value), createObject('value', 'none'))]",
          "tags": "[if(parameters('deployIOA'), createObject('value', parameters('tags')), createObject('value', createObject()))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12942972211545939077"
            }
          },
          "parameters": {
            "hostingPlanName": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "functionAppIdentityName": {
              "type": "string"
            },
            "packageURL": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "eventHubNamespaceName": {
              "type": "string"
            },
            "eventHubName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "virtualNetworkSubnetId": {
              "type": "string"
            },
            "csCID": {
              "type": "string"
            },
            "csClientIdUri": {
              "type": "string"
            },
            "csClientSecretUri": {
              "type": "string"
            },
            "diagnosticSettingName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-09-01",
              "name": "[parameters('hostingPlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "B1",
                "tier": "Basic"
              },
              "kind": "Linux",
              "properties": {
                "reserved": true
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')))]": {}
                }
              },
              "properties": {
                "clientCertEnabled": true,
                "enabled": true,
                "httpsOnly": true,
                "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "appSettings": [
                    {
                      "name": "PYTHON_THREADPOOL_THREAD_COUNT",
                      "value": "2"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                      "value": "1"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "python"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
                      "value": "3.9"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "[parameters('packageURL')]"
                    },
                    {
                      "name": "AzureWebJobsStorage__blobServiceUri",
                      "value": "[format('{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage)]"
                    },
                    {
                      "name": "AzureWebJobsStorage__accountName",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-05-01').keys[0].value)]"
                    },
                    {
                      "name": "AzureEventHubConnectionString__fullyQualifiedNamespace",
                      "value": "[format('{0}.servicebus.windows.net', parameters('eventHubNamespaceName'))]"
                    },
                    {
                      "name": "AzureStorageAccount",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "EventHubName",
                      "value": "[parameters('eventHubName')]"
                    },
                    {
                      "name": "CS_CLIENT_ID",
                      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('csClientIdUri'))]"
                    },
                    {
                      "name": "CS_CLIENT_SECRET",
                      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('csClientSecretUri'))]"
                    },
                    {
                      "name": "CS_AUTH_MODE",
                      "value": "direct_auth"
                    },
                    {
                      "name": "CS_CID",
                      "value": "[parameters('csCID')]"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    },
                    {
                      "name": "AZURE_CLIENT_ID",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').clientId]"
                    }
                  ],
                  "ftpsState": "Disabled",
                  "http20Enabled": true,
                  "ipSecurityRestrictions": [
                    {
                      "action": "Deny",
                      "ipAddress": "0.0.0.0/0",
                      "name": "Deny all",
                      "priority": 0
                    }
                  ],
                  "linuxFxVersion": "PYTHON|3.9",
                  "minTlsVersion": "1.2",
                  "pythonVersion": "3.9",
                  "scmIpSecurityRestrictionsUseMain": true,
                  "use32BitWorkerProcess": false,
                  "vnetName": "[parameters('virtualNetworkName')]"
                },
                "storageAccountRequired": false,
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2022-10-01",
              "name": "[parameters('hostingPlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabled": true,
                "profiles": [
                  {
                    "name": "[parameters('hostingPlanName')]",
                    "capacity": {
                      "default": "1",
                      "maximum": "8",
                      "minimum": "1"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                          "operator": "GreaterThan",
                          "statistic": "Average",
                          "threshold": 60,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M"
                        },
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                          "operator": "LessThan",
                          "statistic": "Average",
                          "threshold": 25,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M"
                        },
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1"
                        }
                      }
                    ]
                  }
                ],
                "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "logs": [
                  {
                    "category": "FunctionAppLogs",
                    "enabled": true
                  }
                ],
                "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-activityLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-entraLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppIdentityName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').functionAppIdentityName), createObject('value', 'none'))]",
          "keyVaultName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.keyVaultName.value), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storageAccountName), createObject('value', 'none'))]",
          "eventHubNamespaceName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubNamespaceName.value), createObject('value', 'none'))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "3759890741511968330"
            }
          },
          "parameters": {
            "functionAppIdentityName": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal"
            },
            "keyVaultName": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "eventHubNamespaceName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "KeyVaultSecretsOfficerRoleId": {
              "type": "string",
              "defaultValue": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7"
            },
            "StorageBlobDataOwnerRoleId": {
              "type": "string",
              "defaultValue": "b7e6dc6d-f1e8-4753-8033-0f276bb0955b"
            },
            "AzureEventHubsDataReceiverRoleId": {
              "type": "string",
              "defaultValue": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('functionAppIdentityName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('KeyVaultSecretsOfficerRoleId'), resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('KeyVaultSecretsOfficerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('StorageBlobDataOwnerRoleId'), resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('StorageBlobDataOwnerRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.EventHub/namespaces/{0}', parameters('eventHubNamespaceName'))]",
              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), parameters('AzureEventHubsDataReceiverRoleId'), resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('AzureEventHubsDataReceiverRoleId'))]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]",
                "principalType": "[parameters('principalType')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
              ]
            }
          ],
          "outputs": {
            "functionIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]"
            },
            "functionIdentityName": {
              "type": "string",
              "value": "[parameters('functionAppIdentityName')]"
            },
            "functionIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').clientId]"
            },
            "functionIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-entraLogFunction-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "hostingPlanName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').hostingPlanName), createObject('value', 'none'))]",
          "functionAppName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').functionAppName), createObject('value', 'none'))]",
          "functionAppIdentityName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.functionIdentityName.value), createObject('value', 'none'))]",
          "packageURL": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').ioaPackageURL), createObject('value', 'none'))]",
          "storageAccountName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').storageAccountName), createObject('value', 'none'))]",
          "eventHubNamespaceName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubNamespaceName.value), createObject('value', 'none'))]",
          "eventHubName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').eventHubName), createObject('value', 'none'))]",
          "virtualNetworkName": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.virtualNetworkName.value), createObject('value', 'none'))]",
          "virtualNetworkSubnetId": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csSubnet2Id.value), createObject('value', 'none'))]",
          "diagnosticSettingName": "[if(parameters('deployIOA'), createObject('value', variables('entraLogSettings').functionAppDiagnosticSettingName), createObject('value', 'none'))]",
          "csCID": "[if(parameters('deployIOA'), createObject('value', parameters('falconCID')), createObject('value', 'none'))]",
          "csClientIdUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csClientIdUri.value), createObject('value', 'none'))]",
          "csClientSecretUri": "[if(parameters('deployIOA'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix'))), '2022-09-01').outputs.csClientSecretUri.value), createObject('value', 'none'))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "12942972211545939077"
            }
          },
          "parameters": {
            "hostingPlanName": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "functionAppIdentityName": {
              "type": "string"
            },
            "packageURL": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "eventHubNamespaceName": {
              "type": "string"
            },
            "eventHubName": {
              "type": "string"
            },
            "virtualNetworkName": {
              "type": "string"
            },
            "virtualNetworkSubnetId": {
              "type": "string"
            },
            "csCID": {
              "type": "string"
            },
            "csClientIdUri": {
              "type": "string"
            },
            "csClientSecretUri": {
              "type": "string"
            },
            "diagnosticSettingName": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-09-01",
              "name": "[parameters('hostingPlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "B1",
                "tier": "Basic"
              },
              "kind": "Linux",
              "properties": {
                "reserved": true
              }
            },
            {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2020-12-01",
              "name": "[parameters('functionAppName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "functionapp,linux",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')))]": {}
                }
              },
              "properties": {
                "clientCertEnabled": true,
                "enabled": true,
                "httpsOnly": true,
                "keyVaultReferenceIdentity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName'))]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                "siteConfig": {
                  "alwaysOn": true,
                  "appSettings": [
                    {
                      "name": "PYTHON_THREADPOOL_THREAD_COUNT",
                      "value": "2"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                      "value": "1"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "python"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME_VERSION",
                      "value": "3.9"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "WEBSITE_RUN_FROM_PACKAGE",
                      "value": "[parameters('packageURL')]"
                    },
                    {
                      "name": "AzureWebJobsStorage__blobServiceUri",
                      "value": "[format('{0}.blob.{1}', parameters('storageAccountName'), environment().suffixes.storage)]"
                    },
                    {
                      "name": "AzureWebJobsStorage__accountName",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2023-05-01').keys[0].value)]"
                    },
                    {
                      "name": "AzureEventHubConnectionString__fullyQualifiedNamespace",
                      "value": "[format('{0}.servicebus.windows.net', parameters('eventHubNamespaceName'))]"
                    },
                    {
                      "name": "AzureStorageAccount",
                      "value": "[parameters('storageAccountName')]"
                    },
                    {
                      "name": "EventHubName",
                      "value": "[parameters('eventHubName')]"
                    },
                    {
                      "name": "CS_CLIENT_ID",
                      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('csClientIdUri'))]"
                    },
                    {
                      "name": "CS_CLIENT_SECRET",
                      "value": "[format('@Microsoft.KeyVault(SecretUri={0})', parameters('csClientSecretUri'))]"
                    },
                    {
                      "name": "CS_AUTH_MODE",
                      "value": "direct_auth"
                    },
                    {
                      "name": "CS_CID",
                      "value": "[parameters('csCID')]"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    },
                    {
                      "name": "AZURE_CLIENT_ID",
                      "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('functionAppIdentityName')), '2023-01-31').clientId]"
                    }
                  ],
                  "ftpsState": "Disabled",
                  "http20Enabled": true,
                  "ipSecurityRestrictions": [
                    {
                      "action": "Deny",
                      "ipAddress": "0.0.0.0/0",
                      "name": "Deny all",
                      "priority": 0
                    }
                  ],
                  "linuxFxVersion": "PYTHON|3.9",
                  "minTlsVersion": "1.2",
                  "pythonVersion": "3.9",
                  "scmIpSecurityRestrictionsUseMain": true,
                  "use32BitWorkerProcess": false,
                  "vnetName": "[parameters('virtualNetworkName')]"
                },
                "storageAccountRequired": false,
                "virtualNetworkSubnetId": "[parameters('virtualNetworkSubnetId')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/autoscalesettings",
              "apiVersion": "2022-10-01",
              "name": "[parameters('hostingPlanName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "enabled": true,
                "profiles": [
                  {
                    "name": "[parameters('hostingPlanName')]",
                    "capacity": {
                      "default": "1",
                      "maximum": "8",
                      "minimum": "1"
                    },
                    "rules": [
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                          "operator": "GreaterThan",
                          "statistic": "Average",
                          "threshold": 60,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M"
                        },
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Increase",
                          "type": "ChangeCount",
                          "value": "1"
                        }
                      },
                      {
                        "metricTrigger": {
                          "metricName": "CpuPercentage",
                          "metricResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]",
                          "operator": "LessThan",
                          "statistic": "Average",
                          "threshold": 25,
                          "timeAggregation": "Average",
                          "timeGrain": "PT1M",
                          "timeWindow": "PT5M"
                        },
                        "scaleAction": {
                          "cooldown": "PT5M",
                          "direction": "Decrease",
                          "type": "ChangeCount",
                          "value": "1"
                        }
                      }
                    ]
                  }
                ],
                "targetResourceUri": "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('hostingPlanName'))]"
              ]
            },
            {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[parameters('diagnosticSettingName')]",
              "properties": {
                "logs": [
                  {
                    "category": "FunctionAppLogs",
                    "enabled": true
                  }
                ],
                "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogFunctionIdentity-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorage-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-entraLogStorageEncryption-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-ioa-keyvault-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-virtualNetwork-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('deployIOA')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-defaultSubscription-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))]",
      "resourceGroup": "[parameters('ioaResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "falconClientId": "[if(parameters('deployIOA'), createObject('value', parameters('falconClientId')), createObject('value', 'none'))]",
          "falconClientSecret": "[if(parameters('deployIOA'), createObject('value', parameters('falconClientSecret')), createObject('value', 'none'))]",
          "falconCloudRegion": "[if(parameters('deployIOA'), createObject('value', parameters('falconCloudRegion')), createObject('value', 'US-1'))]",
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "7944746005522938207"
            }
          },
          "parameters": {
            "falconClientId": {
              "type": "string"
            },
            "falconClientSecret": {
              "type": "securestring"
            },
            "falconCloudRegion": {
              "type": "string",
              "defaultValue": "US-1",
              "allowedValues": [
                "US-1",
                "US-2",
                "EU-1"
              ]
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "variables": {
            "$fxv#0": "## CrowdStrike API Client Scopes required:\r\n## - CSPM Registration (read/write)\r\n\r\nparam(\r\n    [Parameter(Mandatory = $true)]\r\n    [string]$AzureTenantId,\r\n\r\n    [Parameter(Mandatory = $true)]\r\n    [string]$AzureSubscriptionId\r\n)\r\n\r\n# Falcon variables\r\nswitch ($Env:FALCON_CLOUD_REGION) {\r\n    US-1 {\r\n        $FALCON_API_BASE_URL = \"api.crowdstrike.com\"\r\n    }\r\n    US-2 {\r\n        $FALCON_API_BASE_URL = \"api.us-2.crowdstrike.com\"\r\n    }\r\n    EU-1 {\r\n        $FALCON_API_BASE_URL = \"api.eu-1.crowdstrike.com\"\r\n    } \r\n    Default {\r\n        $FALCON_API_BASE_URL = \"api.crowdstrike.com\"\r\n    }\r\n}\r\n\r\n# Get CrowdStrike API Access Token\r\nfunction Get-FalconAPIAccessToken {\r\n    param (\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$ClientId,\r\n\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$ClientSecret\r\n    )\r\n    try {\r\n        $Params = @{\r\n            Uri     = \"https://${FALCON_API_BASE_URL}/oauth2/token\"\r\n            Method  = \"POST\"\r\n            Headers = @{\r\n                \"Content-Type\" = \"application/x-www-form-urlencoded\"\r\n            }\r\n            Body    = @{\r\n                client_id     = $ClientId\r\n                client_secret = $ClientSecret\r\n            }\r\n        }\r\n        return ((Invoke-WebRequest @Params).Content | ConvertFrom-Json).access_token\r\n    }\r\n    catch [System.Exception] { \r\n        Write-Error \"An exception was caught: $($_.Exception.Message)\"\r\n        break\r\n    }\r\n}\r\n\r\nfunction Set-AzureDefaultSubscription {\r\n    param (\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$AccessToken,\r\n\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$AzureTenantId,\r\n\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$AzureSubscriptionId\r\n    )\r\n    try {\r\n        $Params = @{\r\n            Uri     = \"https://${FALCON_API_BASE_URL}/cloud-connect-cspm-azure/entities/default-subscription-id/v1?tenant-id=${AzureTenantId}&subscription_id=${AzureSubscriptionId}\"\r\n            Method  = \"PATCH\"\r\n            Headers = @{\r\n                \"Authorization\" = \"Bearer ${AccessToken}\"\r\n            }\r\n        }\r\n        return (Invoke-WebRequest @Params).Content\r\n    }\r\n    catch [System.Exception] { \r\n        Write-Error \"An exception was caught: $($_.Exception.Message)\"\r\n        break\r\n    }\r\n}\r\n\r\n$AccessToken = $(Get-FalconAPIAccessToken -ClientId ${Env:FALCON_CLIENT_ID} -ClientSecret ${Env:FALCON_CLIENT_SECRET})\r\nSet-AzureDefaultSubscription -AccessToken $AccessToken -AzureTenantId $AzureTenantId -AzureSubscriptionId $AzureSubscriptionId"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[format('cs-horizon-ioa-{0}', subscription().subscriptionId)]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "AzurePowerShell",
              "properties": {
                "azPowerShellVersion": "12.3",
                "environmentVariables": [
                  {
                    "name": "FALCON_CLOUD_REGION",
                    "value": "[parameters('falconCloudRegion')]"
                  },
                  {
                    "name": "FALCON_CLIENT_ID",
                    "value": "[parameters('falconClientId')]"
                  },
                  {
                    "name": "FALCON_CLIENT_SECRET",
                    "secureValue": "[parameters('falconClientSecret')]"
                  }
                ],
                "arguments": "[format('-AzureTenantId {0} -AzureSubscriptionId {1}', tenant().tenantId, subscription().subscriptionId)]",
                "scriptContent": "[variables('$fxv#0')]",
                "retentionInterval": "PT1H",
                "cleanupPreference": "OnSuccess"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-cert-deployment-{0}', parameters('deploymentNameSuffix')))]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ioaResourceGroupName'))]",
        "policyExemptions",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('iomResourceGroupName')), 'Microsoft.Resources/deployments', format('cs-iom-account-deployment-{0}', parameters('deploymentNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "eventHubAuthorizationRuleId": {
      "type": "string",
      "value": "[if(parameters('deployIOA'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.eventHubAuthorizationRuleId.value, 'none')]"
    },
    "activityLogEventHubName": {
      "type": "string",
      "value": "[if(parameters('deployIOA'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.activityLogEventHubName.value, 'none')]"
    },
    "entraLogEventHubName": {
      "type": "string",
      "value": "[if(parameters('deployIOA'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ioaResourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-eventHubs-{1}', parameters('deploymentNamePrefix'), parameters('deploymentNameSuffix'))), '2022-09-01').outputs.entraLogEventHubName.value, 'none')]"
    }
  }
}